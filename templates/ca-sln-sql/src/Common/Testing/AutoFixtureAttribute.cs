using AutoFixture;
using AutoFixture.Kernel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Xunit.Sdk;

namespace Common.Testing
{
	/// <summary>
	/// Provides auto-generated data specimens generated by AutoFixture as an extension to xUnit.net's Theory attribute.
	/// </summary>
	[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
	public class AutoFixtureAttribute : DataAttribute
	{
		/// <summary>
		/// Allows the <see cref="IFixture"/> to be created using customizations from the method's assembly.
		/// </summary>
		public AutoFixtureAttribute()
		{
		}

		/// <summary>
		/// Allows the <see cref="IFixture"/> to be created using customizations from the method's assembly and the <see cref="Type"/>'s assembly.
		/// </summary>
		/// <param name="type">The type used to infer the assembly where <see cref="ICustomization"/>s and <see cref="ISpecimenBuilder"/>s reside.</param>
		public AutoFixtureAttribute(Type type)
		{
			LoadingAssemblies.Add(type.Assembly);
		}

		/// <summary>
		/// Allows the <see cref="IFixture"/> to be created using customizations from the method's assembly and a collection of <see cref="Type"/>s' assemblies.
		/// </summary>
		/// <param name="types">A collection of types used to infer the assemblies where <see cref="ICustomization"/>s and <see cref="ISpecimenBuilder"/>s reside.</param>
		public AutoFixtureAttribute(Type[] types)
		{
			IEnumerable<Assembly> assemblies = types.Select(x => x.Assembly);
			foreach (Assembly assembly in assemblies)
			{
				LoadingAssemblies.Add(assembly);
			}
		}

		/// <summary>
		/// Gets or sets a collection of assemblies that will be used to find <see cref="ICustomization"/>s and <see cref="ISpecimenBuilder"/>s.
		/// </summary>
		protected HashSet<Assembly> LoadingAssemblies { get; set; } = new HashSet<Assembly>();

		/// <summary>
		/// Returns the data to be used to test the theory.
		/// </summary>
		/// <param name="testMethod">The method that is being tested.</param>
		/// <returns>The theory data generated by <see cref="Fixture"/>.</returns>
		public override IEnumerable<object[]> GetData(MethodInfo testMethod)
		{
			if (testMethod == null)
			{
				throw new ArgumentNullException(nameof(testMethod));
			}

			if (testMethod.DeclaringType != null)
			{
				LoadingAssemblies.Add(testMethod.DeclaringType.Assembly);
			}

			var fixture = AutoFixture.AutoFixtureFactory.GetInstance(LoadingAssemblies);

			var specimens = new List<object>();
			foreach (var p in testMethod.GetParameters())
			{
				var context = new SpecimenContext(fixture);
				var specimen = context.Resolve(p);
				specimens.Add(specimen);
			}

			return new[] { specimens.ToArray() };
		}
	}
}
